{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
		"Print to console": {
		"scope": "javascript, typescriptreact, typescript",
		"prefix": "clog",
		"body": [
			"console.log('$1', $2);",
		],
	},
		"Import React": {
		"scope": "javascript, typescriptreact",
		"prefix": "ir",
		"body": [
			"import * as React from 'react';",
		],
	},
	"Import from React Native": {
		"scope": "javascript, typescriptreact",
		"prefix": "irn",
		"body": [
			"import { ${1:Text, View} } from 'react-native';",
		],
	},
	"Import from": {
		"scope": "javascript, typescriptreact",
		"prefix": "ids",
		"body": [
			"import $2 from '$1';",
		],
	},
	"Generate Mutation": {
		"scope":"typescript",
		"prefix": "mutation",
		"body": [
			"// $1",
			"// $2",
			"",
			"export type $3Input = {",
			"  $4",
			"};",
			"",
			"export type $3Response = {",
			"  $6",
			"};",
			"",
			"export const ${3/./${0:/downcase}/}Mutation = gql`",
  		"  mutation ${3/./${0:/downcase}/}Mutation(\\$input: Input!) {",
			"    ${3/./${0:/downcase}/}(input: \\$input)",
			"      @rest(method: \"POST\", type: \"$3Response\", path: \"$8\", bodySerializer: \"formDataSerializer\") {",
			"      $9",
			"      }",
			"    }",
			"`;",
		]
	}
}